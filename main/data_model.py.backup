# generated by datamodel-codegen:
#   filename:  api.yml
#   timestamp: 2024-06-18T22:08:47+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class Info(BaseModel):
    title: str
    version: str


class Server(BaseModel):
    url: str
    description: str


class Echo(BaseModel):
    type: str
    example: str


class Properties(BaseModel):
    echo: Echo


class Schema(BaseModel):
    type: str
    properties: Properties


class ApplicationJson(BaseModel):
    schema_: Schema = Field(..., alias='schema')


class Content(BaseModel):
    application_json: ApplicationJson = Field(..., alias='application/json')


class RequestBody(BaseModel):
    content: Content


class TestInput(BaseModel):
    type: str
    example: str


class TestOutput(BaseModel):
    type: str
    example: str


class Properties1(BaseModel):
    test_input: TestInput
    test_output: TestOutput


class Schema1(BaseModel):
    type: str
    properties: Properties1


class ApplicationJson1(BaseModel):
    schema_: Schema1 = Field(..., alias='schema')


class Content1(BaseModel):
    application_json: ApplicationJson1 = Field(..., alias='application/json')


class Field200(BaseModel):
    description: str
    content: Content1


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias='200')


class Post(BaseModel):
    summary: str
    requestBody: RequestBody
    responses: Responses


class FieldTest(BaseModel):
    post: Post


class Lead(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Properties2(BaseModel):
    lead: Lead


class Schema2(BaseModel):
    type: str
    properties: Properties2


class ApplicationJson2(BaseModel):
    schema_: Schema2 = Field(..., alias='schema')


class Content2(BaseModel):
    application_json: ApplicationJson2 = Field(..., alias='application/json')


class RequestBody1(BaseModel):
    content: Content2


class WillRespond(BaseModel):
    type: str
    description: str


class Properties3(BaseModel):
    lead: Lead
    will_respond: WillRespond


class Schema3(BaseModel):
    type: str
    properties: Properties3


class ApplicationJson3(BaseModel):
    schema_: Schema3 = Field(..., alias='schema')


class Content3(BaseModel):
    application_json: ApplicationJson3 = Field(..., alias='application/json')


class Field2001(BaseModel):
    description: str
    content: Content3


class Responses1(BaseModel):
    field_200: Field2001 = Field(..., alias='200')


class Post1(BaseModel):
    requestBody: RequestBody1
    responses: Responses1


class FieldDmResponsePredict(BaseModel):
    description: str
    post: Post1


class Paths(BaseModel):
    field_test: FieldTest = Field(..., alias='/test')
    field_dm_response_predict: FieldDmResponsePredict = Field(
        ..., alias='/dm_response_predict'
    )


class BALANCE(BaseModel):
    type: str


class OCCUPATION(BaseModel):
    type: str


class SCR(BaseModel):
    type: str


class HOLDINGPERIOD(BaseModel):
    type: str


class ACCTYPE(BaseModel):
    type: str


class LENOFRLTNINMNTH(BaseModel):
    type: str


class NOOFLCRTXNS(BaseModel):
    type: str


class NOOFLDRTXNS(BaseModel):
    type: str


class NOOFBRCSHWDLDRTXNS(BaseModel):
    type: str


class NOOFATMDRTXNS(BaseModel):
    type: str


class NOOFNETDRTXNS(BaseModel):
    type: str


class NOOFMOBDRTXNS(BaseModel):
    type: str


class NOOFCHQDRTXNS(BaseModel):
    type: str


class FLGHASCC(BaseModel):
    type: str


class AMTATMDR(BaseModel):
    type: str


class AMTBRCSHWDLDR(BaseModel):
    type: str


class AMTCHQDR(BaseModel):
    type: str


class AMTNETDR(BaseModel):
    type: str


class AMTMOBDR(BaseModel):
    type: str


class AMTLDR(BaseModel):
    type: str


class FLGHASANYCHGS(BaseModel):
    type: str


class AMTOTHBKATMUSGCHGS(BaseModel):
    type: str


class AMTMINBALNMCCHGS(BaseModel):
    type: str


class NOOFIWCHQBNCTXNS(BaseModel):
    type: str


class NOOFOWCHQBNCTXNS(BaseModel):
    type: str


class AVGAMTPERATMTXN(BaseModel):
    type: str


class AVGAMTPERCSHWDLTXN(BaseModel):
    type: str


class AVGAMTPERCHQTXN(BaseModel):
    type: str


class AVGAMTPERNETTXN(BaseModel):
    type: str


class AVGAMTPERMOBTXN(BaseModel):
    type: str


class FLGHASNOMINEE(BaseModel):
    type: str


class FLGHASOLDLOAN(BaseModel):
    type: str


class Properties4(BaseModel):
    BALANCE: BALANCE
    OCCUPATION: OCCUPATION
    SCR: SCR
    HOLDING_PERIOD: HOLDINGPERIOD
    ACC_TYPE: ACCTYPE
    LEN_OF_RLTN_IN_MNTH: LENOFRLTNINMNTH
    NO_OF_L_CR_TXNS: NOOFLCRTXNS
    NO_OF_L_DR_TXNS: NOOFLDRTXNS
    NO_OF_BR_CSH_WDL_DR_TXNS: NOOFBRCSHWDLDRTXNS
    NO_OF_ATM_DR_TXNS: NOOFATMDRTXNS
    NO_OF_NET_DR_TXNS: NOOFNETDRTXNS
    NO_OF_MOB_DR_TXNS: NOOFMOBDRTXNS
    NO_OF_CHQ_DR_TXNS: NOOFCHQDRTXNS
    FLG_HAS_CC: FLGHASCC
    AMT_ATM_DR: AMTATMDR
    AMT_BR_CSH_WDL_DR: AMTBRCSHWDLDR
    AMT_CHQ_DR: AMTCHQDR
    AMT_NET_DR: AMTNETDR
    AMT_MOB_DR: AMTMOBDR
    AMT_L_DR: AMTLDR
    FLG_HAS_ANY_CHGS: FLGHASANYCHGS
    AMT_OTH_BK_ATM_USG_CHGS: AMTOTHBKATMUSGCHGS
    AMT_MIN_BAL_NMC_CHGS: AMTMINBALNMCCHGS
    NO_OF_IW_CHQ_BNC_TXNS: NOOFIWCHQBNCTXNS
    NO_OF_OW_CHQ_BNC_TXNS: NOOFOWCHQBNCTXNS
    AVG_AMT_PER_ATM_TXN: AVGAMTPERATMTXN
    AVG_AMT_PER_CSH_WDL_TXN: AVGAMTPERCSHWDLTXN
    AVG_AMT_PER_CHQ_TXN: AVGAMTPERCHQTXN
    AVG_AMT_PER_NET_TXN: AVGAMTPERNETTXN
    AVG_AMT_PER_MOB_TXN: AVGAMTPERMOBTXN
    FLG_HAS_NOMINEE: FLGHASNOMINEE
    FLG_HAS_OLD_LOAN: FLGHASOLDLOAN


class Lead2(BaseModel):
    type: str
    description: str
    properties: Properties4


class Schemas(BaseModel):
    Lead: Lead2


class Components(BaseModel):
    schemas: Schemas


class Model(BaseModel):
    openapi: str
    info: Info
    servers: List[Server]
    paths: Paths
    components: Components
